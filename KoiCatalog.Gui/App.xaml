<Application x:Class="KoiCatalog.Gui.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:valueConverters="clr-namespace:KoiCatalog.Gui.ValueConverters"
             xmlns:mah="http://metro.mahapps.com/winfx/xaml/controls"
             xmlns:gui="clr-namespace:KoiCatalog.Gui"
             Startup="App_OnStartup">
    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <!-- MahApps.Metro resource dictionaries.-->
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Controls.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Fonts.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Colors.xaml" />

                <!-- MahApps.Metro accent and AppTheme setting -->
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Accents/Steel.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Accents/BaseLight.xaml" />

                <!-- MahApps.Metro extras -->
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Controls.AnimatedSingleRowTabControl.xaml" />

                <ResourceDictionary Source="CustomExpanderStyle.xaml"/>

                <ResourceDictionary Source="Colors.xaml"/>
                <ResourceDictionary Source="Icons.xaml"/>
            </ResourceDictionary.MergedDictionaries>

            <Style TargetType="{x:Type ScrollViewer}" BasedOn="{StaticResource MetroScrollViewer}">
                <!-- Prevents ScrollViewer from showing its focus effect when, for example, a dialog is opened. -->
                <Setter Property="Focusable" Value="False"/>
            </Style>

            <Style TargetType="{x:Type Hyperlink}" BasedOn="{StaticResource {x:Type Hyperlink}}">
                <Setter Property="TextDecorations" Value="None"/>
                <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=NavigateUri}"/>
                <Setter Property="Command" Value="{x:Static gui:Commands.NavigateTo}"/>
            </Style>

            <MenuItem x:Key="MenuItems.Cut" Command="Cut"
                      Icon="{DynamicResource Icons.Cut}" x:Shared="False"/>
            <MenuItem x:Key="MenuItems.Copy" Command="Copy"
                      Icon="{DynamicResource Icons.Copy}" x:Shared="False"/>
            <MenuItem x:Key="MenuItems.Paste" Command="Paste"
                      Icon="{DynamicResource Icons.Paste}" x:Shared="False"/>
            <MenuItem x:Key="MenuItems.Delete" Command="EditingCommands.Delete"
                      Icon="{DynamicResource Icons.Cross}" x:Shared="False"/>
            <MenuItem x:Key="MenuItems.SelectAll" Command="SelectAll"
                      Icon="{DynamicResource Icons.SelectAll}" x:Shared="False"/>
            <MenuItem x:Key="MenuItems.SelectNone" Command="gui:Commands.SelectNone"
                      Icon="{DynamicResource Icons.SelectNone}" x:Shared="False"/>
            <MenuItem x:Key="MenuItems.SelectInverse" Command="gui:Commands.SelectInverse"
                      Icon="{DynamicResource Icons.SelectInverse}" x:Shared="False"/>

            <CompositeCollection x:Key="TextBoxMenuItems" x:Shared="False">
                <StaticResourceExtension ResourceKey="MenuItems.Cut"/>
                <StaticResourceExtension ResourceKey="MenuItems.Copy"/>
                <StaticResourceExtension ResourceKey="MenuItems.Paste"/>
                <StaticResourceExtension ResourceKey="MenuItems.Delete"/>
                <StaticResourceExtension ResourceKey="MenuItems.SelectAll"/>
            </CompositeCollection>
            
            <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource MetroTextBox}">
                <Setter Property="ContextMenu">
                    <Setter.Value>
                        <ContextMenu ItemsSource="{DynamicResource TextBoxMenuItems}"/>
                    </Setter.Value>
                </Setter>
            </Style>
            
            <CompositeCollection x:Key="DataGridContextMenuItems" x:Shared="False">
                <StaticResourceExtension ResourceKey="MenuItems.Copy"/>
                <StaticResourceExtension ResourceKey="MenuItems.SelectAll"/>
            </CompositeCollection>

            <Style TargetType="{x:Type DataGrid}" BasedOn="{StaticResource MetroDataGrid}">
                <Setter Property="ContextMenu">
                    <Setter.Value>
                        <ContextMenu ItemsSource="{DynamicResource DataGridContextMenuItems}"/>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style TargetType="{x:Type DataGridCell}" BasedOn="{StaticResource MetroDataGridCell}">
                <Setter Property="BorderThickness" Value="0"/>
            </Style>

            <Style x:Key="DataGridTextStyleBase"
                   TargetType="{x:Type TextBlock}" BasedOn="{StaticResource MetroTextBlock}">
                <Setter Property="TextTrimming" Value="CharacterEllipsis"/>
                <Setter Property="VerticalAlignment" Value="Center"/>
            </Style>

            <Style x:Key="DataGridTextColumnElementStyle"
                   TargetType="{x:Type TextBlock}" BasedOn="{StaticResource DataGridTextStyleBase}">
                <Setter Property="ToolTip" Value="{Binding Path=Text, RelativeSource={RelativeSource Self}}"/>
                <Setter Property="Padding" Value="10,4"/>
            </Style>
            
            <Style x:Key="CenteredDataGridTextColumnElementStyle"
                   TargetType="TextBlock" BasedOn="{StaticResource DataGridTextColumnElementStyle}">
                <Setter Property="HorizontalAlignment" Value="Center"/>
            </Style>

            <Style TargetType="{x:Type DataGridTextColumn}" BasedOn="{StaticResource {x:Type DataGridTextColumn}}">
                <!-- Todo: This doesn't work for some reason. Fix it. -->
                <Setter Property="ElementStyle" Value="{DynamicResource DataGridTextColumnElementStyle}"/>
            </Style>

            <Style TargetType="{x:Type DataGridColumnHeader}" BasedOn="{StaticResource MetroDataGridColumnHeader}">
                <Setter Property="ToolTip" Value="{Binding}"/>
                <Setter Property="ContentTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <!-- Todo: Account for non-string types. -->
                            <TextBlock Text="{Binding Converter={x:Static valueConverters:DisplayValueConverter.Instance}}"
                                       Style="{DynamicResource DataGridTextStyleBase}"/>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style TargetType="{x:Type GridSplitter}" BasedOn="{StaticResource {x:Type GridSplitter}}">
                <Setter Property="Background" Value="Transparent"/>
            </Style>

            <Style x:Key="PlaceholderText"
                   TargetType="{x:Type TextBlock}" BasedOn="{StaticResource MetroTextBlock}">
                <Setter Property="FontStyle" Value="Italic"/>
                <Setter Property="Foreground" Value="{DynamicResource GrayBrush3}"/>
                <Setter Property="TextWrapping" Value="Wrap"/>
            </Style>

            <ControlTemplate x:Key="IconHeaderTemplate" TargetType="{x:Type HeaderedContentControl}">
                <Grid Background="Transparent">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <Label x:Name="SizingTarget"
                           Grid.Column="1" Padding="0"
                           Foreground="{Binding RelativeSource={RelativeSource AncestorType={x:Type ContentPresenter}},
                                                Path=(TextElement.Foreground)}"
                           FontSize="{Binding RelativeSource={RelativeSource AncestorType={x:Type ContentPresenter}},
                                              Path=(TextElement.FontSize)}"
                           Content="{TemplateBinding Content}"/>
                    <Viewbox Grid.Column="0" Margin="0,0,2,0"
                             Height="{Binding ElementName=SizingTarget, Path=ActualHeight}">
                        <ContentControl Content="{TemplateBinding Header}" Focusable="False"/>
                    </Viewbox>
                </Grid>
            </ControlTemplate>

            <Style x:Key="SimpleButton" TargetType="{x:Type Button}">
                <Setter Property="OverridesDefaultStyle" Value="True"/>
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="Cursor" Value="Hand"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border Background="{TemplateBinding Background}">
                                <ContentPresenter/>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Background" Value="{DynamicResource AccentColorBrush4}"/>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="SimpleButtonInverted"
                   TargetType="{x:Type Button}" BasedOn="{StaticResource SimpleButton}">
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Background" Value="{DynamicResource SemiTransparentWhiteBrush}"/>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <!-- A simple button with an additional focus effect. -->
            <Style x:Key="SimpleButtonAlternate"
                   TargetType="{x:Type Button}" BasedOn="{StaticResource SimpleButton}">
                <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Background" Value="{DynamicResource AccentColorBrush4}"/>
                    </Trigger>
                    <Trigger Property="IsFocused" Value="True">
                        <Setter Property="Background" Value="{DynamicResource AccentColorBrush3}"/>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <!-- A simple button without a background. -->
            <Style x:Key="SimplerButton"
                   TargetType="{x:Type Button}" BasedOn="{StaticResource SimpleButton}">
                <Setter Property="Foreground" Value="{DynamicResource SemiTransparentWhiteBrush}"/>
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Foreground" Value="{DynamicResource BlackBrush}"/>
                        <Setter Property="Background" Value="Transparent"/>
                    </Trigger>
                    <Trigger Property="IsPressed" Value="True">
                        <Setter Property="Foreground" Value="{DynamicResource SemiTransparentWhiteBrush}"/>
                        <Setter Property="Background" Value="Transparent"/>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="ParagraphStyle"
                   TargetType="{x:Type TextBlock}" BasedOn="{StaticResource {x:Type TextBlock}}">
                <Setter Property="TextWrapping" Value="Wrap"/>
                <Setter Property="Margin" Value="0,0,0,8"/>
                <Setter Property="TextAlignment" Value="Justify"/>
            </Style>

            <Style x:Key="FootnoteStyle"
                   TargetType="{x:Type TextBlock}" BasedOn="{StaticResource ParagraphStyle}">
                <Setter Property="FontSize" Value="10"/>
                <Setter Property="FontStyle" Value="Italic"/>
                <Setter Property="Foreground" Value="{DynamicResource GrayBrush3}"/>
            </Style>

            <Style x:Key="HeadingStyle"
                   TargetType="{x:Type TextBlock}" BasedOn="{StaticResource {x:Type TextBlock}}">
                <Setter Property="FontSize" Value="36"/>
                <Setter Property="Foreground" Value="{DynamicResource AccentBaseColorBrush}"/>
                <Setter Property="FontFamily" Value="Segoe UI Light"/>
                <Setter Property="Margin" Value="0,0,0,8"/>
                <Setter Property="TextWrapping" Value="Wrap"/>
            </Style>

            <Style x:Key="Heading2Style"
                   TargetType="{x:Type TextBlock}" BasedOn="{StaticResource HeadingStyle}">
                <Setter Property="FontSize" Value="30"/>
            </Style>

            <Style x:Key="Heading3Style"
                   TargetType="{x:Type TextBlock}" BasedOn="{StaticResource HeadingStyle}">
                <Setter Property="FontSize" Value="20"/>
                <Setter Property="Margin" Value="0,0,0,4"/>
            </Style>

            <Style x:Key="EmphasisTextStyle" TargetType="{x:Type TextElement}">
                <Setter Property="FontWeight" Value="Bold"/>
                <Setter Property="Foreground" Value="{DynamicResource AccentBaseColorBrush}"/>
            </Style>

            <Style x:Key="ClearButtonStyle"
                   TargetType="{x:Type Button}" BasedOn="{StaticResource ChromelessButtonStyle}">
                <Setter Property="Focusable" Value="False"/>
                <Setter Property="MinHeight" Value="2"/>
                <Setter Property="FontWeight" Value="Normal"/>
                <Setter Property="FontSize" Value="16"/>
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Background" Value="{DynamicResource GrayBrush8}"/>
                        <Setter Property="Foreground" Value="{DynamicResource AccentColorBrush}"/>
                    </Trigger>
                    <Trigger Property="IsPressed" Value="True">
                        <Setter Property="Background" Value="{DynamicResource BlackBrush}"/>
                        <Setter Property="Foreground" Value="{DynamicResource WhiteBrush}"/>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="InvertedClearButtonStyle"
                   TargetType="{x:Type Button}" BasedOn="{StaticResource ClearButtonStyle}">
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Background" Value="{DynamicResource AccentColorBrush2}"/>
                        <Setter Property="Foreground" Value="{DynamicResource WhiteBrush}"/>
                    </Trigger>
                    <Trigger Property="IsPressed" Value="True">
                        <Setter Property="Background" Value="{DynamicResource BlackBrush}"/>
                        <Setter Property="Foreground" Value="{DynamicResource WhiteBrush}"/>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <ControlTemplate x:Key="ClearButtonTemplate" TargetType="{x:Type Button}">
                <Button Width="{TemplateBinding mah:TextBoxHelper.ButtonWidth}"
                        Style="{DynamicResource ClearButtonStyle}"
                        FontFamily="{TemplateBinding mah:TextBoxHelper.ButtonFontFamily}"
                        Content="{TemplateBinding mah:TextBoxHelper.ButtonContent}"
                        Command="{TemplateBinding Command}"/>
            </ControlTemplate>

            <ControlTemplate x:Key="InvertedClearButtonTemplate" TargetType="{x:Type Button}">
                <Button Width="{TemplateBinding mah:TextBoxHelper.ButtonWidth}"
                        Style="{DynamicResource InvertedClearButtonStyle}"
                        FontFamily="{TemplateBinding mah:TextBoxHelper.ButtonFontFamily}"
                        Content="{TemplateBinding mah:TextBoxHelper.ButtonContent}"
                        Command="{TemplateBinding Command}"/>
            </ControlTemplate>

            <ControlTemplate x:Key="CloseButtonTemplate" TargetType="{x:Type Button}">
                <Button Height="30"
                        Style="{DynamicResource ClearButtonStyle}">
                    <Viewbox Child="{StaticResource Icons.Cross}"/>
                </Button>
            </ControlTemplate>
            
            <ControlTemplate x:Key="CircularCheckboxTemplate" TargetType="{x:Type CheckBox}">
                <Border Background="Transparent" Padding="{TemplateBinding Padding}">
                    <Grid Width="28" Height="28">
                        <Ellipse Fill="{TemplateBinding Background}"/>
                        <Ellipse Stroke="{DynamicResource SemiTransparentBlackBrush}"/>

                        <Grid Width="20" Height="20">
                            <Grid x:Name="CheckToken" Opacity="0">
                                <Ellipse Fill="{DynamicResource SemiTransparentBlackBrush}"/>
                                <Ellipse Fill="{StaticResource WhiteBrush}" Margin="1"/>
                            </Grid>
                            <ContentControl x:Name="Check"
                                            Content="{StaticResource Icons.Check}"
                                            Foreground="{DynamicResource HighlightBrush}"
                                            Focusable="False"  Opacity="0"/>
                        </Grid>
                    </Grid>
                </Border>

                <ControlTemplate.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter TargetName="CheckToken" Property="Opacity" Value="1"/>
                    </Trigger>
                    <Trigger Property="IsChecked" Value="True">
                        <Setter TargetName="CheckToken" Property="Opacity" Value="1"/>
                        <Setter TargetName="Check" Property="Opacity" Value="1"/>
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
        </ResourceDictionary>
    </Application.Resources>
</Application>
